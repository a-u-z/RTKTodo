{"version":3,"sources":["store/slice/todos.js","components/doneStamp.png","components/components.js","App.js","store/index.js","index.js"],"names":["todoId","todoSlice","createSlice","name","initialState","todos","id","content","isDone","isEditing","reducers","addTodo","state","action","payload","deleteTodo","filter","todo","toggleTodo","map","editTodo","editConfirm","editContent","actions","Background","styled","div","Title","Wrapper","Input","input","SingleTodoWrapper","TodoContent","props","img","ButtonWrapper","Button","button","whichTabActive","Navbar","handleContentChange","handleAdd","handleShow","style","marginBottom","type","value","onChange","placeholder","size","onClick","current","showAll","showDone","showUndo","SingleTodo","handleToggle","handleEditClick","handleDelete","handleEditChange","handleEditConfirm","defaultValue","autoFocus","App","useState","setContent","setEditContent","showType","setShowType","useSelector","dispatch","useDispatch","useRef","e","target","alert","innerText","store","configureStore","reducer","todosReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f3947e5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n// 這裡是 todos 的 reducer ，就是 todos 要怎麼改動，都要在這邊寫下來\nlet todoId = 3 // 等等 id 會越來越多，從 3 開始加\nconst initialState = {\n  // 設定初始值，會用 useSelector(state => state.todo.todos) 拿出資料\n  // state.todo.todos 的 todos 就是底下這個 todos\n  todos: [\n    {\n      id: 1,\n      content: '這是 Redux ( RTK ) 版本的 todo',\n      isDone: true,\n      isEditing: false,\n    },\n    {\n      id: 2,\n      content: '把狀態交給 RTK',\n      isDone: false,\n      isEditing: false,\n    },\n  ],\n}\nexport const todoSlice = createSlice({\n  name: 'todoX', // 這個 name 用來辨識 type, action？\n  //  是 todoX 底下的 addTodo, 這樣在其他的 reducer 也可以有 addTodo 而不會撞名？\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      // 使用時用 dispatch(addTodo(content))\n      // action.payload 可以拿出 addTodo(XX) XX 這裡的參數\n      // 這裡的 state 跟 App.js  useSelector(state => state.todo.todos) 的 state 不同\n\n      return {\n        todos: [\n          {\n            id: todoId++,\n            content: action.payload,\n            isDone: false,\n            isEditing: false,\n          },\n          ...state.todos,\n        ],\n      }\n    },\n    deleteTodo: (state, action) => {\n      return {\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      }\n    },\n    toggleTodo: (state, action) => {\n      return {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload) {\n            return todo\n          } else {\n            return {\n              ...todo,\n              isDone: !todo.isDone,\n            }\n          }\n        }),\n      }\n    },\n    editTodo: (state, action) => {\n      return {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload) {\n            return todo\n          } else {\n            return {\n              ...todo,\n              isEditing: !todo.isEditing,\n            }\n          }\n        }),\n      }\n    },\n    editConfirm: (state, action) => {\n      return {\n        todos: state.todos.map(todo => {\n          if (todo.id !== action.payload.id) {\n            return todo\n          } else {\n            return {\n              ...todo,\n              content: action.payload.editContent,\n              isEditing: !todo.isEditing,\n            }\n          }\n        }),\n      }\n    },\n  },\n})\nexport const { addTodo, deleteTodo, toggleTodo, editTodo, editConfirm } =\n  todoSlice.actions // 給 App.js 用的\n\nexport default todoSlice.reducer // 給 store/index.js 用的\n","export default __webpack_public_path__ + \"static/media/doneStamp.29e02b1c.png\";","import styled from 'styled-components' // 引入一個可以寫 css 的 package\nimport img from './doneStamp.png'\nconst Background = styled.div``\nconst Title = styled.div`\n  color: black;\n  font-size: 100px;\n  text-align: center;\n  margin-bottom: 40px;\n  font-weight: bolder;\n  -webkit-text-stroke: 3px #fff;\n`\nconst Wrapper = styled.div`\n  width: 1000px;\n  height: auto;\n  margin: auto;\n  margin-top: 50px;\n`\nconst Input = styled.input`\n  margin-right: 20px;\n  border-radius: 8px;\n  padding: 18px;\n  font-size: 20px;\n  border: black solid 2px;\n`\nconst SingleTodoWrapper = styled.div`\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 16px;\n  border: 2px solid white;\n  & + & {\n    margin-top: 20px;\n  }\n  margin-top: 15px;\n`\nconst TodoContent = styled.div`\n  padding: 15px;\n  font-size: 35px;\n  color: #ffbde5;\n  word-break: break-all;\n  width: 600px;\n  position: relative;\n  ${props =>\n    props.isDone\n      ? `&:after {\n      content: '';\n      width: 90px;\n      height: 78px;\n      position: absolute;\n      left: 540px;\n      top: -3px;\n      background-image: url(${img});\n      background-size: 100%;\n      z-index: 1;\n    }`\n      : ''}\n`\nconst ButtonWrapper = styled.div``\nconst Button = styled.button`\n  font-size: 25px;\n  padding: 15px;\n  color: white;\n  margin-right: 10px;\n  border-radius: 10px;\n  background: black;\n  border: white 2px outset;\n  transition: 0.5s;\n  &:hover {\n    color: black;\n    background: white;\n    border: black 2px outset;\n    transition: 0.2s;\n    cursor: pointer;\n  }\n  ${props =>\n    !props.whichTabActive\n      ? ''\n      : props.whichTabActive\n      ? `color: black;\n  background: white;\n  border: black 2px outset;\n  transition: 0.2s;`\n      : ''}\n`\nexport {\n  Background,\n  Title,\n  Wrapper,\n  Input,\n  SingleTodoWrapper,\n  TodoContent,\n  ButtonWrapper,\n  Button,\n}\n","import styled from 'styled-components' // 引入一個可以寫 css 的 package\n\nimport React, { useState, useRef } from 'react' // 要引入才可以用 state, ref\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n  editTodo,\n  editConfirm,\n} from './store/slice/todos'\nimport {\n  Background,\n  Title,\n  Wrapper,\n  Input,\n  SingleTodoWrapper,\n  TodoContent,\n  ButtonWrapper,\n  Button,\n} from './components/components'\n\n// 底下就是用 styled 寫的 css ，要 .創造的標籤\n// 然後就可以打一些 css, sass, scss 的寫法\n\nfunction Navbar({\n  content,\n  handleContentChange,\n  handleAdd,\n  handleShow,\n  whichTabActive,\n}) {\n  return (\n    <div style={{ marginBottom: '45px' }}>\n      <Input\n        type=\"text\"\n        value={content}\n        onChange={handleContentChange}\n        placeholder=\"Type something   (//●⁰౪⁰●)//\"\n        size=\"25\"\n      />\n      <Button onClick={handleAdd}>add todo</Button>\n      <Button\n        whichTabActive={whichTabActive.current.showAll}\n        onClick={handleShow}\n      >\n        show all\n      </Button>\n      <Button\n        whichTabActive={whichTabActive.current.showDone}\n        onClick={handleShow}\n      >\n        show done\n      </Button>\n      <Button\n        whichTabActive={whichTabActive.current.showUndo}\n        onClick={handleShow}\n      >\n        show undo\n      </Button>\n    </div>\n  )\n}\nfunction SingleTodo({\n  todo,\n  handleToggle,\n  handleEditClick,\n  handleDelete,\n  handleEditChange,\n  handleEditConfirm,\n}) {\n  return (\n    <SingleTodoWrapper id={todo.id}>\n      {todo.isEditing ? (\n        <Input\n          type=\"text\"\n          defaultValue={todo.content}\n          size=\"30\"\n          onChange={handleEditChange}\n          autoFocus\n        />\n      ) : (\n        <TodoContent isDone={todo.isDone}>{todo.content}</TodoContent>\n      )}\n      <ButtonWrapper>\n        {todo.isEditing ? null : (\n          <Button onClick={() => handleToggle(todo.id)}>\n            {todo.isDone ? 'undo' : 'done'}\n          </Button>\n        )}\n        {todo.isEditing ? (\n          <Button onClick={() => handleEditClick(todo.id)}>Cancel</Button>\n        ) : (\n          <Button onClick={() => handleEditClick(todo.id)}>Edit</Button>\n        )}\n        {todo.isEditing ? (\n          <Button onClick={() => handleEditConfirm(todo.id)}>Confirm</Button>\n        ) : (\n          <Button onClick={() => handleDelete(todo.id)}>Delete</Button>\n        )}\n      </ButtonWrapper>\n    </SingleTodoWrapper>\n  )\n}\nfunction App() {\n  const [content, setContent] = useState('')\n  const [editContent, setEditContent] = useState('')\n  const [showType, setShowType] = useState('all')\n  const todos = useSelector(state => state.todo.todos)\n  // state 裡面有一個叫做 todo 的物件，這是在 store/index.js 命名的\n  // todo 這個物件裡面裝一個叫做 todos 的物件，這是在 store/slice/todos.js 設定的\n  // 而這個 todos 裡面是一個陣列，這個陣列裡面是一筆筆的代辦事項\n  const dispatch = useDispatch()\n  const whichTabActive = useRef({\n    showAll: true,\n    showDone: false,\n    showUndo: false,\n  })\n\n  function handleAdd() {\n    if (content === '') return alert('Please type something in the input box')\n    dispatch(addTodo(content))\n    setContent('')\n  }\n\n  function handleEditConfirm(id) {\n    const action = { id, editContent } // payload 好像只能傳一個參數進去，所以用成物件包兩個東西進去\n    dispatch(editConfirm(action))\n  }\n\n  function handleShow(e) {\n    if (e.target.innerText === 'show all') {\n      whichTabActive.current = {\n        showAll: true,\n        showDone: false,\n        showUndo: false,\n      }\n      return setShowType('all')\n    }\n    if (e.target.innerText === 'show undo') {\n      whichTabActive.current = {\n        showAll: false,\n        showDone: false,\n        showUndo: true,\n      }\n      return setShowType('undo')\n    }\n    if (e.target.innerText === 'show done') {\n      whichTabActive.current = {\n        showAll: false,\n        showDone: true,\n        showUndo: false,\n      }\n      return setShowType('done')\n    }\n  }\n  return (\n    <Background>\n      <Wrapper>\n        <Title>Todo List</Title>\n        <Navbar\n          content={content}\n          handleContentChange={e => setContent(e.target.value)} // 取出最上方新輸入 todo 的內容\n          handleAdd={handleAdd}\n          handleShow={handleShow}\n          whichTabActive={whichTabActive}\n        />\n        {todos\n          .filter(todo => {\n            if (showType === 'undo') return todo.isDone === false\n            if (showType === 'done') return todo.isDone === true\n            if (showType === 'all') return true\n          })\n          .map(todo => (\n            <SingleTodo\n              key={todo.id}\n              todo={todo}\n              handleToggle={id => dispatch(toggleTodo(id))} // undo 變 done, done 變 undo\n              handleEditClick={id => dispatch(editTodo(id))}\n              handleEditChange={e => setEditContent(e.target.value)} // 取出正在 edit 的 todo 的內容\n              handleEditConfirm={handleEditConfirm}\n              handleDelete={id => dispatch(deleteTodo(id))}\n            ></SingleTodo>\n          ))}\n      </Wrapper>\n    </Background>\n  )\n}\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\nimport todosReducer from './slice/todos' // slice 底下的每一個檔案，都是一個 reducer 所以這樣命名\n// 這裡是在創立 store\nexport const store = configureStore({\n  reducer: {\n    // 這裡的 todo 就是在 useSelector(state => state.todo.todos)\n    // state.todo 的 todo\n    todo: todosReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './store/index'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}